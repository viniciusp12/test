üõ°Ô∏è Por√£o Anti-Ransomware
üìñ Sobre o Projeto
O Por√£o Anti-Ransomware √© uma ferramenta de seguran√ßa desenvolvida em Python, projetada para oferecer uma defesa robusta e em m√∫ltiplas camadas contra ataques de ransomware em ambientes Windows. A filosofia central do projeto √© a Defesa em Profundidade H√≠brida, que combina vigil√¢ncia proativa para detectar amea√ßas antes que ajam, com detec√ß√£o reativa para responder instantaneamente a atividades suspeitas no sistema de arquivos.
A ferramenta monitora processos rec√©m-criados e atividades de modifica√ß√£o de arquivos em diret√≥rios cr√≠ticos do usu√°rio, utilizando t√©cnicas avan√ßadas como an√°lise de entropia, verifica√ß√£o de hash em bancos de dados de malware, e escaneamento com regras YARA para identificar e neutralizar amea√ßas em tempo real.
‚ú® Principais Funcionalidades

Monitoramento Proativo: Utiliza a biblioteca psutil para monitorar processos rec√©m-criados em alta frequ√™ncia, permitindo neutralizar amea√ßas no "segundo zero".
Detec√ß√£o Reativa: Emprega a biblioteca watchdog para reagir a eventos do sistema de arquivos (cria√ß√£o, modifica√ß√£o, exclus√£o) em tempo real, oferecendo uma segunda camada de defesa.
An√°lise de Entropia: Calcula a entropia de arquivos modificados para detectar padr√µes de criptografia, um forte indicativo de atividade de ransomware.
Verifica√ß√£o de Hash (Malware DB): Gera o hash SHA256 de novos execut√°veis e o consulta na API do MalwareBazaar (abuse.ch) para identificar malwares conhecidos.
Scanner YARA: Escaneia novos arquivos com um conjunto de regras YARA personalizadas para identificar fam√≠lias de malware e padr√µes maliciosos.
Arquivos "Isca" (Canary Files): Protege arquivos "isca" em locais estrat√©gicos. Qualquer modifica√ß√£o nesses arquivos aciona um alerta m√°ximo e a neutraliza√ß√£o imediata da amea√ßa.
Quarentena Segura: Isola arquivos maliciosos e os execut√°veis de origem em um diret√≥rio de quarentena, protegidos por senha, para evitar danos futuros.
Interface Gr√°fica Intuitiva: Uma interface moderna criada com CustomTkinter que exibe estat√≠sticas em tempo real, logs de atividade e os arquivos em quarentena.

üõ†Ô∏è Tecnologias Utilizadas

Linguagem: Python
Interface Gr√°fica: CustomTkinter
Monitoramento de Processos: psutil
Monitoramento de Arquivos: watchdog
An√°lise de Malware: yara-python, requests
Manipula√ß√£o de Strings: regex

üì¶ Depend√™ncias
Para executar o projeto em um ambiente de desenvolvimento, instale as seguintes depend√™ncias:
shellpip install -r requirements.txt
Como Funciona: Documenta√ß√£o T√©cnica
A ferramenta opera sob o princ√≠pio de Defesa em Profundidade, utilizando uma arquitetura h√≠brida que combina vigil√¢ncia proativa de processos com monitoramento reativo de arquivos em tempo real.
Filosofia Central: Defesa em Profundidade H√≠brida
O princ√≠pio fundamental da ferramenta √© n√£o confiar em uma √∫nica "bala de prata". A defesa √© constru√≠da em camadas, combinando duas estrat√©gias principais:

Vigil√¢ncia Proativa: Tenta ativamente encontrar o malware antes que ele cause dano.
Detec√ß√£o Reativa: Reage em tempo real a a√ß√µes suspeitas que j√° est√£o ocorrendo no sistema de arquivos.

Qualquer uma dessas camadas, ao detectar uma amea√ßa, aciona um protocolo de resposta unificado e inteligente.
Componente 1: O Vigilante Proativo de Processos
O que estamos usando?
A biblioteca psutil dentro de um loop while True de alta frequ√™ncia (intervalo de 0,05s) na fun√ß√£o novos_processos() do arquivo porao.py.
Por que disso?
Ransomwares precisam ser executados para agir. Em vez de esperar que eles modifiquem arquivos, podemos peg√°-los no exato momento em que s√£o iniciados. Um loop de alta frequ√™ncia, ao contr√°rio de um evento, nos d√° controle total sobre a frequ√™ncia com que verificamos por novas amea√ßas, tornando-nos extremamente r√°pidos na detec√ß√£o de processos. A biblioteca psutil √© a padr√£o e mais eficiente em Python para listar e interrogar processos do sistema.
Qual o intuito de usar isso?
O objetivo √© a preven√ß√£o. Esta √© a nossa primeira e mais agressiva linha de defesa, projetada para neutralizar a amea√ßa no "segundo zero", antes que a primeira criptografia de arquivo ocorra.
Exemplo Pr√°tico
Um usu√°rio baixa um arquivo installer.exe malicioso e o executa. O arquivo √© extra√≠do e tenta rodar um outro processo, run.exe, de dentro da pasta C:\Users\User\AppData\Local\Temp. O loop novos_processos, rodando 20 vezes por segundo, imediatamente detecta um novo processo (run.exe) cujo caminho do execut√°vel (exe_path) come√ßa com uma das FORBIDDEN_EXEC_PATHS. Antes mesmo que run.exe possa ler o primeiro arquivo para criptografar, encerrar_proctree() √© chamado e o processo √© eliminado.
Componente 2: O Sensor Reativo de Eventos de Arquivo
O que estamos usando?
A biblioteca watchdog e a classe MonitorFolder que herda de FileSystemEventHandler.
Por que disso?
O watchdog se integra diretamente com as APIs do sistema operacional (como o I/O Completion Ports no Windows) para receber notifica√ß√µes em tempo real sobre eventos de arquivo. Isso √© muito mais eficiente do que verificar manualmente os arquivos repetidamente. Ele nos diz "algo aconteceu neste exato momento", permitindo uma rea√ß√£o instant√¢nea a a√ß√µes que o Vigilante Proativo possa n√£o ter pego.
Qual o intuito de usar isso?
O objetivo √© ser o gatilho de resposta r√°pida para qualquer intera√ß√£o maliciosa com o sistema de arquivos. Se o ransomware n√£o for pego na inicializa√ß√£o, ele ser√° pego assim que tocar no primeiro arquivo de forma suspeita.
Exemplo Pr√°tico
Um ransomware j√° em execu√ß√£o come√ßa a criptografar os arquivos da pasta "Documentos". Ele encontra e modifica o arquivo dados_bancarios.xlsx, que est√° na lista de CANARY_FILES. No exato milissegundo em que a modifica√ß√£o ocorre, o watchdog notifica o MonitorFolder. A fun√ß√£o on_modified √© executada, verifica que o arquivo modificado √© um arquivo isca e chama encerrar_proctree() imediatamente.
Componente 3: O Sistema de Snapshot (A "Mem√≥ria")
O que estamos usando?
Fun√ß√µes personalizadas (criar_snapshot_arquivos, analisar_diferenca_e_agir) e um dicion√°rio Python (SNAPSHOT_ARQUIVOS) para armazenar o estado dos arquivos.
Por que disso?
Detectar o ransomware √© apenas metade da batalha. A outra metade √© remediar o dano. Uma simples lista de "arquivos recentes" √© imprecisa. Um snapshot nos d√° uma fotografia exata do "estado seguro" do sistema (caminho e data de modifica√ß√£o de cada arquivo).
Qual o intuito de usar isso?
O objetivo √© intelig√™ncia de resposta e remedia√ß√£o completa. Em vez de apenas colocar em quarentena o arquivo que disparou o alarme, garantimos que 100% dos arquivos afetados pelo ataque sejam identificados e contidos, transformando uma poss√≠vel cat√°strofe em um incidente gerenci√°vel.
Exemplo Pr√°tico
O antiv√≠rus detecta uma amea√ßa. A fun√ß√£o encerrar_proctree chama analisar_diferenca_e_agir. Esta fun√ß√£o varre o Desktop e encontra 15 novos arquivos .wnry que n√£o estavam no √∫ltimo snapshot, al√©m de um arquivo trabalho.docx cuja data de modifica√ß√£o √© mais recente que a registrada no snapshot. O sistema identifica todos os 16 arquivos como parte do incidente e move cada um deles para a quarentena, limpando completamente a √°rea de trabalho do dano vis√≠vel.
Componente 4: O Protocolo de Resposta Unificado
O que estamos usando?
A fun√ß√£o central encerrar_proctree(), que orquestra a resposta completa.
Por que disso?
Centralizar a resposta garante que, n√£o importa como a amea√ßa foi detectada (seja por um processo suspeito ou por um arquivo modificado), a rea√ß√£o ser√° sempre a mais forte e completa poss√≠vel. Evita a duplica√ß√£o de c√≥digo e garante consist√™ncia.
Qual o intuito de usar isso?
O objetivo √© efic√°cia e robustez. Garantir que cada alerta seja tratado com a m√°xima seriedade, executando a an√°lise de danos, a neutraliza√ß√£o de processos e a reconfigura√ß√£o do sistema (novo snapshot) em uma sequ√™ncia l√≥gica e poderosa.
Exemplo Pr√°tico
Seja um processo rodando da pasta Temp ou um arquivo isca sendo modificado, ambos os eventos levam a uma √∫nica chamada: encerrar_proctree(). Esta fun√ß√£o ent√£o executa sua sequ√™ncia:

Chama analisar_diferenca_e_agir para conter o dano aos arquivos.
Usa taskkill para eliminar os processos.
Espera o sistema estabilizar.
Chama criar_snapshot_arquivos para preparar o sistema para o futuro.

üõ†Ô∏è Instala√ß√£o e Uso
üîë Pr√©-requisitos

Sistema Operacional: Windows 10 ou superior
Python: 3.8+ (adicionado ao PATH do sistema)
Permiss√µes: √â necess√°rio executar os scripts a partir de um terminal com privil√©gios de Administrador.

üì• Passos para Instala√ß√£o

Clone o reposit√≥rio (ou baixe o ZIP e extraia os arquivos):
shellgit clone https://github.com/SEU_USUARIO/SEU_REPOSITORIO.git
cd SEU_REPOSITORIO

Crie a pasta de regras YARA:
Dentro da pasta do projeto, crie uma subpasta chamada rules:
shellmkdir rules

Adicione as regras YARA:

Baixe os arquivos de regras (.yar) de reposit√≥rios confi√°veis (como o signature-base) e coloque-os na pasta rules.
Crie um arquivo index.yar que inclua as regras que voc√™ baixou. Exemplo:
yarainclude "GEN_Ransomware.yar"
include "Crime_Generic.yar"



Instale as depend√™ncias:
Execute o seguinte comando no seu terminal:
shellpip install psutil yara-python requests watchdog regex customtkinter


üöÄ Como Executar
‚ñ∂Ô∏è Execu√ß√£o Manual (Para Testes)
Para iniciar o monitoramento em tempo real para uma sess√£o de teste, execute a partir de um terminal de Administrador:
shellpython gui.py
‚öôÔ∏è Instala√ß√£o como Servi√ßo (Recomendado para Prote√ß√£o Real)
Para que a ferramenta inicie automaticamente com o Windows e permane√ßa ativa, execute o instalador uma √∫nica vez a partir de um terminal de Administrador:
shellpython instalar_servico.py
Isso registrar√° a ferramenta no Agendador de Tarefas, garantindo que o monitoramento comece em cada inicializa√ß√£o, rodando de forma invis√≠vel e com privil√©gios m√°ximos.
üìù Customizar Arquivos Isca (Opcional)

Abra o arquivo porao.py.
Edite a lista CANARY_FILES com os arquivos/diret√≥rios que deseja usar como isca.
Se os arquivos n√£o existirem, o script os criar√° automaticamente na primeira execu√ß√£o.

üöÄ Compilando para .exe (Instalador Final)
Para distribuir a aplica√ß√£o como um programa instal√°vel no Windows, siga os passos abaixo.
Passo 1: Instalar os Pr√©-requisitos
Voc√™ precisar√° de duas ferramentas para compilar o projeto:

PyInstaller: Empacota o c√≥digo Python e suas depend√™ncias.
shellpip install pyinstaller

Inno Setup: Cria o assistente de instala√ß√£o (.exe). Fa√ßa o download no site oficial: jrsoftware.org.

Passo 2: Preparar os Scripts para Compila√ß√£o
Antes de compilar, √© necess√°rio um pequeno ajuste no final do arquivo gui.py para permitir que o mesmo execut√°vel rode tanto a interface gr√°fica quanto o servi√ßo de monitoramento em segundo plano.
Substitua o if __name__ == "__main__": no final do gui.py por este c√≥digo:
pythonif __name__ == "__main__":
    import sys

    # Verifica se o script foi chamado com um argumento para rodar em segundo plano
    if "--background-service" in sys.argv:
        # Inicia apenas o monitor, sem interface gr√°fica (usado pelo servi√ßo do Windows)
        monitor = PoraoMonitor()
        monitor.start_monitoring()
    else:
        # Inicia a aplica√ß√£o com a interface gr√°fica normalmente
        app = App()
        app.mainloop()
Passo 3: Compilar o C√≥digo Python com PyInstaller
Abra um terminal (CMD ou PowerShell) na pasta raiz do projeto.
Garanta que a pasta rules (com suas regras YARA) est√° presente.
Execute o comando abaixo:
shellpyinstaller --noconsole --name="PoraoAntiRansomware" --add-data="rules;rules" gui.py

--noconsole: Impede que uma janela de console apare√ßa.
--name: Define o nome do .exe principal.
--add-data: Inclui a pasta rules no pacote final.

Ao final, uma pasta dist\PoraoAntiRansomware ser√° criada, contendo seu programa compilado.
Passo 4: Criar o Script do Instalador (instalador.iss)
Na pasta raiz do projeto, crie um novo arquivo de texto chamado instalador.iss.
Copie e cole o seguinte conte√∫do nele. Este script diz ao Inno Setup como criar o instalador.
text; Script para o Inno Setup

[Setup]
AppName=Por√£o Anti-Ransomware
AppVersion=1.0
AppPublisher=Seu Nome
DefaultDirName={autopf}\PoraoAntiRansomware
DefaultGroupName=Por√£o Anti-Ransomware
AllowNoIcons=yes
OutputDir=.\release
OutputBaseFilename=PoraoAntiRansomware_Setup
Compression=lzma
SolidCompression=yes
WizardStyle=modern
PrivilegesRequired=admin

[Languages]
Name: "portuguese"; MessagesFile: "compiler:Languages\Portuguese.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
; Copia TUDO da pasta que o PyInstaller criou para dentro do instalador.
Source: "dist\PoraoAntiRansomware\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
; Cria os atalhos no Menu Iniciar e na √Årea de Trabalho
Name: "{group}\Por√£o Anti-Ransomware"; Filename: "{app}\PoraoAntiRansomware.exe"
Name: "{autodesktop}\Por√£o Anti-Ransomware"; Filename: "{app}\PoraoAntiRansomware.exe"; Tasks: desktopicon

[Run]
; Cria a tarefa agendada para rodar o monitoramento quando o Windows iniciar.
Filename: "schtasks"; Parameters: "/Create /SC ONSTART /TN ""MonitorPoraoAntiRansomware"" /TR ""'{app}\PoraoAntiRansomware.exe' --background-service"" /RU SYSTEM /RL HIGHEST /F"; Flags: runhidden

[UninstallRun]
; Remove a tarefa agendada quando o programa for desinstalado.
Filename: "schtasks"; Parameters: "/Delete /TN ""MonitorPoraoAntiRansomware"" /F"; Flags: runhidden
Passo 5: Gerar o Instalador Final

Clique com o bot√£o direito no arquivo instalador.iss.
Selecione a op√ß√£o "Compile".
O Inno Setup ir√° processar o script e, se tudo estiver correto, criar√° uma pasta release.
Dentro da pasta release, voc√™ encontrar√° o PoraoAntiRansomware_Setup.exe.

Pronto! Este √© o seu instalador final, pronto para ser distribu√≠do.
‚ö†Ô∏è Aviso Legal

Esta ferramenta encerra processos cr√≠ticos ‚Äî use com responsabilidade.
A instala√ß√£o e execu√ß√£o requerem privil√©gios de Administrador.
Projeto desenvolvido para fins educacionais e de defesa cibern√©tica.
O uso indevido √© de inteira responsabilidade do usu√°rio.
üö´ √â estritamente proibida qualquer forma de venda ou comercializa√ß√£o deste projeto. Ele √© de autoria exclusiva do desenvolvedor.
